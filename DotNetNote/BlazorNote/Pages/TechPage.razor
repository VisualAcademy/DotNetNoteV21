@*// Blazor Client 데모*@
@page "/techpage"
@inject HttpClient Http
@using DotNetNote.Models
@using Dul.Board

<h1>기술 리스트</h1>

<p>@*<BlazorLinkOnBuild>false</BlazorLinkOnBuild>*@</p>

<h2>출력</h2>
@if (teches == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tech in teches)
            {
                <tr onclick="@(() => Details(tech.Id))">
                    <td>@tech.Id</td>
                    <td>@tech.Title</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (teches != null)
{
    <h3>입력</h3>
    <div>
        기술명: <input type="text" bind="@txtTitle" class="form-control"
                    style="width: 200px; display: inline;" />
        @if (formType != BoardWriteFormType.Modify)
        {
            <input type="button" name="btnSave" value="저장" 
                   class="btn btn-primary" onclick="@Add" />
        }
        @if (formType == BoardWriteFormType.Modify)
        {
            <input type="button" name="btnUpdate" value="수정"
                   class="btn btn-primary" onclick="@Update" />
            <input type="button" name="btnUpdate" value="삭제"
                   class="btn btn-primary" onclick="@Delete" />
        }
    </div>
}

@functions {
    private BoardWriteFormType formType = BoardWriteFormType.None;
}

@functions {
    private string txtTitle;

    private string baseUri = "http://localhost:57368/";

    protected async Task Add()
    {
        formType = BoardWriteFormType.Write;

        string postApi = $"{baseUri}api/TechServices";
        Tech t = new Tech() { Title = txtTitle };

        await Http.SendJsonAsync(HttpMethod.Post, postApi, t);

        await OnInitAsync();

        txtTitle = "";
    }
}

@functions {
    private Tech[] teches;

    protected override async Task OnInitAsync()
    {
        formType = BoardWriteFormType.None;

        string apiUrl = $"{baseUri}/api/TechServices";
        teches = await Http.GetJsonAsync<Tech[]>(apiUrl);
    }
}

@functions {
    private int techId;

    protected async Task Update()
    {
        formType = BoardWriteFormType.Modify;

        string updateUri = $"{baseUri}api/TechServices/{techId}";

        Tech t = new Tech { Id = techId, Title = txtTitle };

        await Http.SendJsonAsync(HttpMethod.Put, updateUri, t);

        await OnInitAsync();

        txtTitle = "";
    }
}

@functions {
    protected async Task Delete()
    {
        formType = BoardWriteFormType.Modify;

        string deleteUri = $"{baseUri}api/TechServices/{techId}";

        await Http.SendJsonAsync(HttpMethod.Delete, deleteUri, null);

        txtTitle = "";

        await OnInitAsync();
    }
}

@functions {
    private Tech tech { get; set; }
    protected async Task Details(int id)
    {
        formType = BoardWriteFormType.Modify;

        string detailsUri = $"{baseUri}api/TechServices/{id}";
        tech = await Http.GetJsonAsync<Tech>(detailsUri);
        techId = tech.Id;
        txtTitle = tech.Title;
    }
}
